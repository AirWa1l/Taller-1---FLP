#lang eopl

;; Gramática BNF - Circuitos Lógicos
;; <circuit> ::= (circuit <gate-list>)
;; <gate-list> ::= empty | <gate> <gate-list>
;; <gate> ::= (gate <gate-id> <type> <input-list>)
;; <gate-id> ::= identificador de la compuerta
;; <type> ::= and | or | not | xor
;; <input-list> ::= empty | <bool> <input-list> | <gate-ref> <input-list>
;; <gate-ref> ::= identificador de otra compuerta

;; Definición de constructores
;; Crea un circuito con una lista de compuertas
(define (make-circuit gate-list) `(circuit ,gate-list))

;; Crea una lista de compuertas
(define (make-gate-list gates) gates)

;; Crea una compuerta lógica con un identificador, tipo y lista de entradas
(define (make-gate gate-id type input-list) `(gate ,gate-id (type ,type) (input-list ,@input-list)))

;; Crea una lista de entradas para una compuerta
(define (make-input-list inputs) inputs)

;; Definición de extractores
;; Obtiene la lista de compuertas de un circuito
(define (circuit->gate-list circuit) (cadr circuit))

;; Obtiene la primera compuerta de la lista
(define (gate-list->first gate-list) (car gate-list))

;; Obtiene el resto de la lista de compuertas
(define (gate-list->rest gate-list) (cdr gate-list))

;; Obtiene el identificador de una compuerta
(define (gate->gate-id gate) (cadr gate))

;; Obtiene el tipo de una compuerta
(define (gate->type gate) (cadr (caddr gate)))

;; Obtiene la lista de entradas de una compuerta
(define (gate->input-list gate) (cdr (cadddr gate)))

;; Obtiene la primera entrada de la lista de entradas
(define (input-list->first input-list) (car input-list))

;; Obtiene el resto de la lista de entradas
(define (input-list->rest input-list) (cdr input-list))

;; Ejemplo 1: Circuito con una compuerta NOT
(define circuito-Not
  (make-circuit (make-gate-list
                 (list (make-gate 'G1 'not (make-input-list '(A)))))))

;; Ejemplo 2: Circuito AND simple
(define circuito-And
  (make-circuit (make-gate-list
                 (list (make-gate 'G1 'and (make-input-list '(A B)))))))

;; Ejemplo 3: Combinación de compuertas OR y NOT
(define circuito-Or
  (make-circuit (make-gate-list
                 (list (make-gate 'G1 'or (make-input-list '(A B)))
                       (make-gate 'G2 'not (make-input-list '(G1)))))))

;; Ejemplo 4: Implementación de XOR sin operador XOR
(define circuito-Xor
  (make-circuit (make-gate-list
                 (list (make-gate 'G1 'or (make-input-list '(A B)))
                       (make-gate 'G2 'and (make-input-list '(A B)))
                       (make-gate 'G3 'not (make-input-list '(G2)))
                       (make-gate 'G4 'and (make-input-list '(G1 G3)))))))

;; Pruebas
(display "Circuito 1: ") (display circuito-Not) (newline)
(display "Circuito 2: ") (display circuito-And) (newline)
(display "Circuito 3: ") (display circuito-Or) (newline)
(display "Circuito 4: ") (display circuito-Xor) (newline)
