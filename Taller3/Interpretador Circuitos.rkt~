#lang eopl
;******************************************************************************************
; Autores : Juan Fernando Calle Sanchez - 2127464 ;
;           Michael Ramirez Suriel - 2122236 ;
;           Jose Adrian Marin Ordoñez - 2126988 ;

; Implementación de representación de sintáxis abstracta de un circuito ;

;******************************************************************************************
;; Interpretador para lenguaje que permite evaluar expresiones matemáticas y circuitos lógicos combinacionales

;; La definición BNF para las expresiones del lenguaje:
;;
;;  <program>     ::= <expression>
;;  <expression>  ::= <number>
;;                  ::= <identifier>
;;                  ::= <primitive> ({<expression>}*(,))
;;                  ::= if <expresion> then <expresion> else <expresion>
;;                  ::= let (identifier = expression)* in expression
;;                  ::=<circuit>
;;  <primitive>     ::= + | - | * | add1 | sub1
;;                  ::=eval-circuit | connect-ciruits | merge-circuits
;;  <circuit>       ::=<gate_list>
;;  <gate-list>     ::= empty | <gate> <gate-list>
;;  <gate>          ::= <identifier> <type> <input-list>)
;;  <type>          ::= and | or | not | xor
;;  <input-list>    ::= empty | <bool> <input-list> | <identifier> <input-list>
;;  <bool>          ::= True | False

;******************************************************************************************

;Especificación Léxica

(define scanner-spec-simple-interpreter
  '((white-sp
      (whitespace) skip)
     (comment
      ("%" (arbno (not #\newline))) skip)
     (identifier
      (letter (arbno (or letter digit "?"))) symbol)
     (number
      (digit (arbno digit)) number)
     (number
      ("-" digit (arbno digit)) number)))

;Especificación Sintáctica (gramática)** Extensión de la gramática para incluir circuitos y operaciones con circuitos
(define grammar-simple-interpreter
  '((program (expression) a-program)
     (expression (number) lit-exp)
     (expression (identifier) var-exp)
     (expression ("'" identifier) symbol-exp)  ; Añade esta línea
     (expression (primitive "(" (separated-list expression ",") ")") primapp-exp)
     (expression ("if" expression "then" expression "else" expression) if-exp)
     (expression ("let" (arbno identifier "=" expression) "in" expression) let-exp)
     (expression (circuit) circuit-exp)
     (expression ("and") and-exp) ; Nueva regla para "and"
     (expression ("or") or-exp) ; Nueva regla para "or"
     (expression ("not") not-exp) ; Nueva regla para "not"
     (expression ("xor") xor-exp) ; Nueva regla para "xor"


     ; Primitivas
     (primitive ("+") add-prim)
     (primitive ("-") substract-prim)
     (primitive ("*") mult-prim)
     (primitive ("add1") incr-prim)
     (primitive ("sub1") decr-prim)
     (primitive ("eval-circuit") eval-circuit-prim)
     (primitive ("connect-circuits") connect-circuits-prim)
     (primitive ("merge-circuits") merge-circuits-prim)

     ; Circuitos
     (circuit ("(" "circuit" gate-list ")") a-circuit)
     (gate-list ("(" "gate_list" (arbno gate) ")") my-gate-list)
     (gate ("(" "gate" identifier gate-type input-list ")") a-gate)
     (gate-type ("and") and-type)
     (gate-type ("or") or-type)
     (gate-type ("not") not-type)
     (gate-type ("xor") xor-type)
     (input-list ("(" "input_list" (arbno input) ")") my-input-list)
     (input (boolean) bool-input)
     (input (identifier) ref-input)
     (boolean ("True") true-val)
     (boolean ("False") false-val)))

;Tipos de datos para la sintaxis abstracta de la gramática

(sllgen:make-define-datatypes scanner-spec-simple-interpreter grammar-simple-interpreter)

(define show-the-datatypes
  (lambda () (sllgen:list-define-datatypes scanner-spec-simple-interpreter grammar-simple-interpreter)))

;*******************************************************************************************
;Parser, Scanner, Interfaz

(define scan&parse
  (sllgen:make-string-parser scanner-spec-simple-interpreter grammar-simple-interpreter))

(define just-scan
  (sllgen:make-string-scanner scanner-spec-simple-interpreter grammar-simple-interpreter))

(define interpretador
  (sllgen:make-rep-loop  "--> "
    (lambda (pgm) (eval-program  pgm))
    (sllgen:make-stream-parser
      scanner-spec-simple-interpreter
      grammar-simple-interpreter)))

;*******************************************************************************************
;El Interprete

(define eval-program
  (lambda (pgm)
    (cases program pgm
      (a-program (body)
        (eval-expression body (init-env))))))

(define init-env
  (lambda ()
    (empty-env)))  ; Ambiente completamente vacío

(define eval-expression
  (lambda (exp env)
    (cases expression exp
      (lit-exp (datum) datum)
      (var-exp (id) (apply-env env id))
      (symbol-exp (id) id)  ; <-- Nueva cláusula para símbolos literales como 'G2
      (and-exp () 'and) ; Manejar "and" como símbolo
      (or-exp () 'or) ; Manejar "or" como símbolo
      (not-exp () 'not) ; Manejar "not" como símbolo
      (xor-exp () 'xor)
      (primapp-exp (prim rands)
        (let ((args (eval-rands rands env)))  ; Siempre evaluamos los argumentos
          (apply-primitive prim args)))
      (if-exp (test-exp true-exp false-exp)
        (let ((test-val (eval-expression test-exp env)))
          (if (true-value? test-val)
              (eval-expression true-exp env)
              (eval-expression false-exp env))))
      (let-exp (ids rands body)
        (let ((args (eval-rands rands env)))
          (eval-expression body (extend-env ids args env))))
      (circuit-exp (circuit) circuit))))

(define extract-circuit-result
  (lambda (env)
    (display (list "extract-circuit-result: INICIO con env=" env)) (newline)
    (cases environment env
      (empty-env-record ()
        (display "extract-circuit-result: ambiente vacío, devuelve 0") (newline)
        0)
      (extended-env-record (syms vals parent-env)
        (display (list "extract-circuit-result: syms=" syms " vals=" vals)) (newline)
        (if (null? syms)
            (begin
              (display "extract-circuit-result: syms vacío, devuelve #f") (newline)
              #f)
            (begin
              (display (list "extract-circuit-result: devuelve" (car vals))) (newline)
              (car vals)))))))
  ; Devuelve lista con el primer par (símbolo valor)

(define type-of
  (lambda (g)
    (display (list "type-of: g=" g "\n")) ; Depuración
    (cases gate g
      (a-gate (name type inputs) type))))
(define eval-rands
  (lambda (rands env)
    (display (list "eval-rands: INICIO rands=" rands " env=" env "\n"))
    (map (lambda (x)
           (let ((result (eval-rand x env)))
             (display (list "eval-rands: rand=" x " result=" result "\n"))
             result)) ; No extraer el primer elemento
         rands)))

(define eval-rand
  (lambda (rand env)
    (display (list "eval-rand: INICIO rand=" rand " env=" env "\n"))
    (eval-expression rand env)))


(define apply-primitive
  (lambda (prim args)
    (cases primitive prim
      (add-prim () (+ (car args) (cadr args)))
      (substract-prim () (- (car args) (cadr args)))
      (mult-prim () (* (car args) (cadr args)))
      (incr-prim () (+ (car args) 1))
      (decr-prim () (- (car args) 1))
      (eval-circuit-prim ()
        (if (not (= (length args) 1))
            (eopl:error 'apply-primitive "eval-circuit requiere exactamente 1 argumento")
            (let ((circ (car args)))
              (if (circuit? circ)
                  (let ((circuit-env (eval-circuit circ (empty-env))))
                    (let ((result (extract-circuit-result circuit-env)))
                      result))
                  circ)))) 
      (connect-circuits-prim ()
  (if (= (length args) 3)
      (let ((circ1 (car args))
            (circ2 (cadr args))
            (target-gate-name (caddr args)))
        (if (and (circuit? circ1) (circuit? circ2) (symbol? target-gate-name))
            (connect-circuits circ1 circ2 target-gate-name)
            (eopl:error 'connect-circuits "Argumentos inválidos: se esperaban dos circuitos y un símbolo")))
      (eopl:error 'connect-circuits "Número incorrecto de argumentos: se esperaban exactamente 3, recibió ~a" (length args))))

      (merge-circuits-prim ()
        (if (not (= (length args) 4)) ; Debe recibir 4 argumentos
            (eopl:error 'apply-primitive "merge-circuits requiere exactamente 4 argumentos, recibió ~s" args)
            (let ((circ1 (car args))
                  (circ2 (cadr args))
                  (gate-type-sym (caddr args)) ; Recibe el tipo como símbolo
                  (new-gate-name (cadddr args)))
              (if (and (circuit? circ1) (circuit? circ2) (symbol? gate-type-sym) (symbol? new-gate-name))
                  (merge-circuits circ1 circ2 gate-type-sym new-gate-name)
                  (eopl:error 'apply-primitive "Argumentos inválidos para merge-circuits"))))))))
(define true-value?
  (lambda (x)
    (not (or (zero? x) (eq? x #f)))))

(define last
  (lambda (lst)
    (if (null? (cdr lst))
        (car lst)
        (last (cdr lst)))))

;*******************************************************************************************
;Ambientes

(define-datatype environment environment?
  (empty-env-record)
  (extended-env-record
    (syms (list-of symbol?))
    (vals (list-of scheme-value?))
    (env environment?)))

(define scheme-value?
  (lambda (v)
    (or (number? v) (boolean? v) (circuit? v) (eq? v #f)(eq? v #t) ))) ; Asegura que #f sea reconocido

(define empty-env
  (lambda ()
    (empty-env-record)))

(define extend-env
  (lambda (syms vals env)
    (display (list "extend-env: INICIO syms=" syms " vals=" vals " env=" env "\n")) ; Depuración: Inicio de extend-env
    (let ((new-env (extended-env-record syms vals env)))
      (display (list "extend-env: FIN new-env=" new-env "\n")) ; Depuración: Fin de extend-env
      new-env)))

(define apply-env
  (lambda (env sym)
    (cases environment env
      (empty-env-record ()
        (eopl:error 'apply-env "No binding for ~s" sym))
      (extended-env-record (syms vals env)
        (let ((pos (list-find-position sym syms)))
          (if (number? pos)
              (let ((val (list-ref vals pos)))
                (display (list "Applying env: " sym " -> " val "\n")) ; Depuración
                val)
              (apply-env env sym)))))))

;****************************************************************************************
;Funciones Auxiliares



(define (get-gate-name g)
  (cases gate g
    (a-gate (name type inputs) name)))
(define (eval-circuit circuit-val env)
  (cases circuit circuit-val
    (a-circuit (gates)
      (eval-gate-list gates env))))


(define eval-gate-list
  (lambda (gates env)
    (cases gate-list gates
      (my-gate-list (gate-structs)
        (if (null? gate-structs)
            env ; Caso base: no hay compuertas, retorna el ambiente actual
            (let* ((current-gate (car gate-structs))
                   (gate-result (eval-gate current-gate env))
                   (gate-name (car gate-result))
                   (gate-value (cadr gate-result)))
              (eval-gate-list (my-gate-list (cdr gate-structs)) (extend-env (list gate-name) (list gate-value) env)))))
      )))
(define (eval-gate g env)
  (display (list "eval-gate: INICIO g=" g " env=" env "\n")) ; Depuración: Inicio de eval-gate
  (cases gate g
    (a-gate (name type input-list)
      (let ((input-values (eval-input-list input-list env)))
        (display (list "eval-gate: input-values=" input-values "\n")) ; Depuración: Valores de entrada
        (let ((result (apply-gate type input-values)))
          (display (list "eval-gate: result=" result "\n")) ; Depuración: Resultado de apply-gate
          (display (list "eval-gate: FIN name=" name " result=" result "\n")) ; Depuración: Fin de eval-gate
          (list name result))))))

(define (eval-input-list input-list-val env)
  (display (list "eval-input-list: INICIO input-list-val=" input-list-val " env=" env "\n")) ; Depuración: Inicio de eval-input-list
  (cases input-list input-list-val
    (my-input-list (inputs)
      (map (lambda (inp)
             (cases input inp
               (bool-input (val)
                 (cases boolean val
                   (true-val () #t)
                   (false-val () #f)))
               (ref-input (name)
                 (apply-env env name))))
           inputs))))

(define apply-gate
  (lambda (type inputs)
    (cases gate-type type
      (and-type () (and (car inputs) (cadr inputs)))
      (or-type () (or (car inputs) (cadr inputs)))
      (not-type () (not (car inputs)))
      (xor-type () (xor (car inputs) (cadr inputs))))))

(define xor
  (lambda (a b)
    (and (or a b) (not (and a b)))))


(define gate-name
  (lambda (g)
    (cases gate g
      (a-gate (name type inputs) name))))

; 

(define connect-circuits
  (lambda (circ1 circ2 target-gate-name)
    (display (list "connect-circuits: circ1=" circ1 " circ2=" circ2 " target-gate-name=" target-gate-name)) (newline)
    (cases circuit circ1
      (a-circuit (gates1-struct)
        (let ((gates1 (cases gate-list gates1-struct (my-gate-list (gates) gates))))
          (display (list "connect-circuits: gates1=" gates1)) (newline)
          (let ((output-gate (last gates1)))
            (display (list "connect-circuits: output-gate=" output-gate)) (newline)
            (cases circuit circ2
              (a-circuit (gates2-struct)
                (let ((gates2 (cases gate-list gates2-struct (my-gate-list (gates) gates))))
                  (display (list "connect-circuits: gates2=" gates2)) (newline)
                  (let ((mapped-gates
                          (map (lambda (g)
                                 (cases gate g
                                   (a-gate (name type inputs)
                                     (display (list "connect-circuits: gate-name=" name " inputs=" inputs)) (newline)
                                     (if (eqv? name target-gate-name)
                                         (begin
                                           (display (list "connect-circuits: replacing gate=" name " with output-gate=" output-gate)) (newline)
                                           output-gate)
                                         (begin
                                           (display (list "connect-circuits: replacing refs in gate=" name)) (newline)
                                           (a-gate name type (replace-refs inputs target-gate-name (gate-name output-gate))))))))
                               gates2)))
                    (display (list "connect-circuits: mapped-gates=" mapped-gates)) (newline)
                    (a-circuit
                      (my-gate-list
                        (append gates1 mapped-gates)))))))))))))

(define replace-refs
  (lambda (inputs target-name new-name)
    (cases input-list inputs
      (my-input-list (input-list-val)
        (my-input-list
          (map (lambda (inp)
                 (cases input inp
                   (ref-input (old-name)
                     (if (eqv? old-name target-name)
                         (ref-input new-name) ; Reemplazar la referencia
                         inp)) ; Mantener la referencia original
                   (bool-input (val) inp))) ; Mantener la entrada booleana original
               input-list-val))))))

(define merge-circuits
  (lambda (circ1 circ2 gate-type-symbol new-gate-name)
    (cases circuit circ1
      (a-circuit (gates1-struct)
        (cases circuit circ2
          (a-circuit (gates2-struct)
            (let* ((gates1 (cases gate-list gates1-struct (my-gate-list (gates) gates)))
                   (gates2 (cases gate-list gates2-struct (my-gate-list (gates) gates)))
                   (last-gate1 (last gates1))
                   (last-gate2 (last gates2))
                   (gate-type-val (symbol->gate-type gate-type-symbol))
                   (new-gate (a-gate new-gate-name gate-type-val (my-input-list (list (ref-input (gate-name last-gate1)) (ref-input (gate-name last-gate2)))))))
              (a-circuit (my-gate-list (append gates1 (append gates2 (list new-gate))))))))))))
(define symbol->gate-type
  (lambda (sym)
    (cond
      ((eq? sym 'and) (and-type))
      ((eq? sym 'or) (or-type))
      ((eq? sym 'not) (not-type))
      ((eq? sym 'xor) (xor-type))
      (else (eopl:error 'symbol->gate-type "Tipo de compuerta no válido: ~s" sym)))))



(define list-find-position
  (lambda (sym los)
    (list-index (lambda (sym1) (eqv? sym1 sym)) los)))

(define list-index
  (lambda (pred ls)
    (cond
      ((null? ls) #f)
      ((pred (car ls)) 0)
      (else (let ((list-index-r (list-index pred (cdr ls))))
              (if (number? list-index-r)
                  (+ list-index-r 1)
                  #f))))))

(define gate_type
  (lambda (g)
    (cases gate g
      (a-gate (name type inputs) type))))

(define gate-inputs
  (lambda (g)
    (cases gate g
      (a-gate (name type inputs) inputs))))

(define input-list->list
  (lambda (input-list-val)
    (cases input-list input-list-val
      (my-input-list (inputs) inputs))))
;******************************************************************************************
;Pruebas

(show-the-datatypes)
just-scan
scan&parse
(just-scan "add1(x)")
(just-scan "add1(  x  )%cccc")
(just-scan "add1(  +(5, x)  )%cccc")
(just-scan "add1(  +(5, %ccccc x) ")
(scan&parse "add1(x)")
(scan&parse "add1(  x  )%cccc")
(scan&parse "add1(  +(5, x)  )%cccc")
(scan&parse "add1(  +(5, %cccc
x)) ")
(scan&parse "if -(x,4) then +(y,11) else *(y,10)")
(scan&parse "let
x = -(y,1)
in
let
x = +(x,2)
in
add1(x)")

(define caso1 (primapp-exp (incr-prim) (list (lit-exp 5))))
(define exp-numero (lit-exp 8))
(define exp-ident (var-exp 'c))
(define exp-app (primapp-exp (add-prim) (list exp-numero exp-ident)))
(define programa (a-program exp-app))
(define una-expresion-dificil (primapp-exp (mult-prim)
                                          (list (primapp-exp (incr-prim)
                                                            (list (var-exp 'v)
                                                                  (var-exp 'y)))
                                                (var-exp 'x)
                                                (lit-exp 200))))
(define un-programa-dificil
  (a-program una-expresion-dificil))





(interpretador)


;;Ejemplo 1
;;let C1= (circuit (gate_list (gate G1 not (input_list True))))
;; in eval-circuit (C1)  ---> Devuelve False 

;;let C2 = (circuit (gate_list(gate G1 and (input_list True True))))
;;  in eval-circuit (C2)  ---> Devuelve True
;;let C3 = (circuit (gate_list(gate G1 and (input_list False True))))
;;  in eval-circuit (C3)  ---> Devuelve false


;;let C3 = (circuit (gate_list
;;                   (gate G1 and (input_list True True))
;;                   (gate G2 not (input_list G1))))
;; in eval-circuit (C3)  -->false

;;let C1 = (circuit (gate_list (gate G1 not (input_list True))(gate G3 not (input_list G1))))
;;C2 = (circuit (gate_list
;;                    (gate G1 and (input_list False True))
;;                    (gate G2 not (input_list True))))
;;  in connect-circuits (C1, C2, 'G1)



;;let C1 = (circuit (gate_list (gate G4 not (input_list False))
;;                             (gate G3 not (input_list G4))))
;; C2 = (circuit (gate_list
;;                  (gate G1 and (input_list True True))
;;                  (gate G2 not (input_list G1))))
;;  in eval-circuit(connect-circuits (C1, C2, 'G1))


;;let C1 = (circuit (gate_list (gate G4 not (input_list False))
;;                             (gate G3 not (input_list G4))))
;;C2 = (circuit (gate_list
;;                  (gate G1 and (input_list True True))
;;                  (gate G2 not (input_list G1))))
;;  in merge-circuits (C1, C2 , and , 'G8)
